{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Downloads/React/Joke/src/Joke.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Joke(props) {\n  _s();\n\n  const [isShown, setIsShown] = React.useState(false);\n  /**\n   * Challenge:\n   * - Only display the punchline paragraph if `isShown` is true\n   */\n\n  function toggleShown() {\n    setIsShown(prevShown => !prevShown);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.setup && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: props.setup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 23\n    }, this), isShown && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.punchline\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleShown,\n      children: isShown ? \"Hide Punchline\" : \"Show Punchline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Joke, \"AfL4AMulNN2iutG1qDR77gnp7oc=\");\n\n_c = Joke;\nconst cond1 = false;\nconst cond2 = false;\n\nif (cond1 && console.log(\"Hello there\")) {// this code will NOT run\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Joke\");","map":{"version":3,"sources":["/Users/mac/Downloads/React/Joke/src/Joke.js"],"names":["React","Joke","props","isShown","setIsShown","useState","toggleShown","prevShown","setup","punchline","cond1","cond2","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAClC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,KAAK,CAACK,QAAN,CAAe,KAAf,CAA9B;AACA;AACF;AACA;AACA;;AACE,WAASC,WAAT,GAAuB;AACrBF,IAAAA,UAAU,CAAEG,SAAD,IAAe,CAACA,SAAjB,CAAV;AACD;;AACD,sBACE;AAAA,eACGL,KAAK,CAACM,KAAN,iBAAe;AAAA,gBAAKN,KAAK,CAACM;AAAX;AAAA;AAAA;AAAA;AAAA,YADlB,EAEGL,OAAO,iBAAI;AAAA,gBAAID,KAAK,CAACO;AAAV;AAAA;AAAA;AAAA;AAAA,YAFd,eAGE;AAAQ,MAAA,OAAO,EAAEH,WAAjB;AAAA,gBACGH,OAAO,GAAG,gBAAH,GAAsB;AADhC;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAnBuBF,I;;KAAAA,I;AAqBxB,MAAMS,KAAK,GAAG,KAAd;AACA,MAAMC,KAAK,GAAG,KAAd;;AACA,IAAID,KAAK,IAAIE,OAAO,CAACC,GAAR,CAAY,aAAZ,CAAb,EAAyC,CACvC;AACD","sourcesContent":["import React from \"react\";\n\nexport default function Joke(props) {\n  const [isShown, setIsShown] = React.useState(false);\n  /**\n   * Challenge:\n   * - Only display the punchline paragraph if `isShown` is true\n   */\n  function toggleShown() {\n    setIsShown((prevShown) => !prevShown);\n  }\n  return (\n    <div>\n      {props.setup && <h3>{props.setup}</h3>}\n      {isShown && <p>{props.punchline}</p>}\n      <button onClick={toggleShown}>\n        {isShown ? \"Hide Punchline\" : \"Show Punchline\"}\n      </button>\n      <hr />\n    </div>\n  );\n}\n\nconst cond1 = false;\nconst cond2 = false;\nif (cond1 && console.log(\"Hello there\")) {\n  // this code will NOT run\n}\n"]},"metadata":{},"sourceType":"module"}